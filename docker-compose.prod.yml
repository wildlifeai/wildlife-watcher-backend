version: "3"

services:
  nginx:
    image: nginx:alpine
    container_name: wildlife-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - strapi
    restart: unless-stopped
    networks:
      - wildlife-network

  strapi:
    image: ghcr.io/wildlifeai/wildlife-watcher-backend:main
    container_name: wildlife-strapi
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - NET_RAW
    env_file: .env
    environment:
      - DATABASE_CLIENT=postgres
      - DATABASE_HOST=wildlife-db
      - DATABASE_POOL_MIN=0
      - DATABASE_POOL_MAX=100
      - DATABASE_POOL_IDLE_TIMEOUT=300000
      - DATABASE_CONNECTION_TIMEOUT=600000
      - DATABASE_ACQUIRE_TIMEOUT=300000
      - DATABASE_CREATE_TIMEOUT=300000
      - DATABASE_DESTROY_TIMEOUT=50000
      - DATABASE_REAP_INTERVAL=10000
      - DATABASE_CREATE_RETRY_INTERVAL=2000
    volumes:
      - ./public/uploads:/opt/app/public/uploads
    depends_on:
      strapiDB:
        condition: service_healthy
    networks:
      - wildlife-network

  strapiDB:
    image: postgres:15.10-alpine
    container_name: wildlife-db
    platform: linux/amd64
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_INITDB_ARGS: "--log-min-messages=debug1"
      POSTGRES_INITDB_WALDIR: "/var/lib/postgresql/pg_wal"
    command:
      [
        "postgres",
        "-c",
        "log_statement=all",
        "-c",
        "log_connections=on",
        "-c",
        "log_disconnections=on",
      ]
    volumes:
      - wildlife-data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - wildlife-network

volumes:
  wildlife-data:
    name: wildlife-data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/wildlife-watcher-backend/postgres-data

networks:
  wildlife-network:
    name: wildlife-network
    driver: bridge
